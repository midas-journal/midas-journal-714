# =========================================================================
#
#  Program:   Insight Segmentation & Registration Toolkit
#  Module:    $RCSfile: itkNormalizedGradientFieldsImageToImageMetric.h,v $
#  Language:  octave 
#
#  Copyright (c) Insight Software Consortium. All rights reserved.
#  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.
#
#     This software is distributed WITHOUT ANY WARRANTY; without even
#     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#     PURPOSE.  See the above copyright notices for more information.
#
#=========================================================================*/
#

#
# This code implements a test case for the evaluation of the scaled-delta kernel 
# of an NGF based cost function in octave: 
#
# 	\left( \| \vec{R(x)} \|^2 - \frac{(\vec{R(x)} \cdot \vec{S(x)})^2}{\|\vec{R(x)}\|\|\vec{S(x)}\|} \right)^2 
#


r = [.1, 0.7]; 
s = [0.4, 0.8]; 
ds = [1.0, 2.0; 3.0, -4.0]; 

function cosval = vectcos(a,b)
  cosval = dot ( a, b ) / (norm(a) * norm(b)); 
endfunction 

function cosval = dvectcos(a,b,da)
  na = norm(a); 
  cosval = (dot(da, b) * dot(a, a)  - dot(a, b) * dot(da, a)) / (na * na * na * norm(b)); 
endfunction 


function y = square(x)
  y = x * x ; 
endfunction 

function k = k0(x,y)
  k = vectcos(x,y) * dot(x, y); 
endfunction 

function k = dk0(x,y,dx)
  k = vectcos(x,y) * dot(dx, y) + dot(x, y) * dvectcos(x,y,dx); 
endfunction 

function k = k(x,y)
  k = dot(y, y) - k0(x,y); 
endfunction 

function cost = f(x,y)
  cost = 0.5 * square(k(x,y)); 
endfunction 

function grad = df(x,y,dx)
  helper = - k(x,y); 
  grad(1) = helper * dk0(x,y,dx(1,:));
  grad(2) = helper * dk0(x,y,dx(2,:));
endfunction 

function grad = dflarge(x,y,dx)
  dotyy = dot(y, y);
  dotxy = dot(x, y);
  cxy = dotxy/ (norm(x) * norm(y)); 
  dotxybyxx = dotxy / dot(x, x); 

  helper = - (dotyy - dotxy * cxy) * cxy; 

  grad(1) = helper * ( 2* dot(dx(1,:), y)  - dotxybyxx * dot(dx(1,:), x)); 
  grad(2) = helper * ( 2* dot(dx(2,:), y)  - dotxybyxx * dot(dx(2,:), x)); 

endfunction

#dstx = dvectcos(s,r, ds(1,:))
#dstxfd = (vectcos(s + 0.001 * ds(1,:), r) - vectcos(s - 0.001 * ds(1,:), r)) / 0.002

#dk0x = dk0(s,r, ds(1,:));
#dk0xfd = (k0(s + 0.001 * ds(1,:), r) - k0(s - 0.001 * ds(1,:), r)) / 0.002;


#dsty = dvectcos(r,s,ds(2,:))
#dstfd = (vectcos(r, s + 0.01 * ds(2,:))  - vectcos(r, s - 0.01 * ds(2,:))) / 0.02


#selfcost = f(s,s)
#dselfcost = df(s,s,ds)


ScaledDeltaScalar_cost = f(s,r)
ScaledDeltaScalar_derivative = df(s, r, ds)


#ddcost = dflarge(s,r,ds)

#test1 = (f(s + 0.001 * ds(1,:), r) - f(s - 0.001 * ds(1,:), r)) / 0.002
#test2 = (f(s + 0.001 * ds(2,:), r) - f(s - 0.001 * ds(2,:), r)) / 0.002

